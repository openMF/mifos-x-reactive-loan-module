plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.5'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.diffplug.spotless' version '7.0.4'
}

spotless {
	format 'misc', {
		target '**/*.md', '**/*.properties', '**/.gitignore', '**/.openapi-generator-ignore', '**/*.yml', '**/*.xml', '**/**.json', '**/*.sql'
		targetExclude '**/build/**', '**/bin/**', '**/.settings/**', '**/.idea/**', '**/.gradle/**', '**/gradlew.bat', '**/licenses/**', '**/banner.txt', '.vscode/**', '.profileconfig.json'
		indentWithSpaces(4)
		endWithNewline()
		trimTrailingWhitespace()
	}

	groovyGradle {
		target '*.gradle', '**/*.gradle'
		targetExclude '**/build/**', '/**/build.gradle' // TODO: temporary disabled on build.gradle until someone fix this issue: https://github.com/diffplug/spotless/issues/1807
		greclipse()
		indentWithSpaces(4)
		endWithNewline()
		trimTrailingWhitespace()
	}

	lineEndings 'UNIX'
}

spotless {
	java {
		targetExclude '**/build/**', '**/bin/**', '**/out/**'
		importOrder() //sort imports alphabetically
		removeUnusedImports()
		eclipse().configFile "$rootDir/config/fineractdev-formatter.xml"
		endWithNewline()
		trimTrailingWhitespace()

		// Enforce style modifier order
		custom 'Modifier ordering', {
			def modifierRanking = [
					public      : 1,
					protected   : 2,
					private     : 3,
					abstract    : 4,
					default     : 5,
					static      : 6,
					final       : 7,
					transient   : 8,
					volatile    : 9,
					synchronized: 10,
					native      : 11,
					strictfp    : 12]
			// Find any instance of multiple modifiers. Lead with a non-word character to avoid
			// accidental matching against for instance, "an alternative default value"
			it.replaceAll(/\W(?:public |protected |private |abstract |default |static |final |transient |volatile |synchronized |native |strictfp ){2,}/, {
				// Do not replace the leading non-word character.  Identify the modifiers
				it.replaceAll(/(?:public |protected |private |abstract |default |static |final |transient |volatile |synchronized |native |strictfp ){2,}/, {
					// Sort the modifiers according to the ranking above
					it.split().sort({ modifierRanking[it] }).join(' ') + ' '
				}
				)
			}
			)
		}
	}

	lineEndings 'UNIX'
}



group = 'microservice.loanrisk'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '21'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
//	mavenLocal()
	mavenCentral()
	maven {
		url "https://mifos.jfrog.io/artifactory/libs-release-local"
	}
}

ext {
	set('springCloudVersion', "2024.0.1")
}

ext.fineractVersion = '0.0.1138-9516656'

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.cloud:spring-cloud-stream'
	implementation 'org.springframework.boot:spring-boot-starter-integration'
	implementation group: 'org.apache.avro', name: 'avro', version: '1.12.0'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.apache.kafka:kafka-clients:4.0.0'
	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'org.springframework.integration:spring-integration-kafka'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation "org.apache.kafka:kafka-clients:3.9.1"
	implementation "org.liquibase:liquibase-core"
	implementation "org.springframework.boot:spring-boot-starter-jdbc"
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly    "org.postgresql:r2dbc-postgresql:1.0.4.RELEASE"
	runtimeOnly    "org.postgresql:postgresql:42.7.7"
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.integration:spring-integration-test'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.springframework.cloud:spring-cloud-stream-test-binder'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

// Fineract dependencies
	implementation "org.apache.fineract:fineract-avro-schemas:${fineractVersion}"
}


dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}



